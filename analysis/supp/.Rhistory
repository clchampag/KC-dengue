colnames(init_covmat) <- rownames(init_covmat) <- names(init_theta)
resources_json <- ssm_resources(init_theta, init_covmat)
# CREATE SSM FILES ---------------------------------------------------------------------
ssm_json <- list(data=data_json, inputs=inputs_json, populations=populations_json, reactions=reactions_json, observations=observations_json)
if(!is.null(sde)){
ssm_json$sde <- sde_json
}
theta_json <- list(resources=resources_json)
write(toJSON(ssm_json),file=file.path(dir_model,"ssm.json"))
write(toJSON(theta_json),file=file.path(dir_model,"theta.json"))
# COMPILE MODEL ---------------------------------------------------------------------
cmd <- sprintf("ssm -s %s/ssm.json",dir_model)
system(cmd)
# SAVE STUFF ---------------------------------------------------------------------
ssm_model <- list(data=data, inputs=my_inputs, state_variables=state_variables, theta=list(init=init_theta, covmat=init_covmat), theta_priors=my_theta_priors)
saveRDS(ssm_model,file.path(dir_model,"ssm_model.rds"))
# create simu folder
dir_simu <- file.path(dir_model,"simu")
if(!file.exists(dir_simu)){
dir.create(dir_simu)
}
}
generate_lhs <- function(sample_size=100) {
dir_lhs <- file.path(dir_model,"lhs")
if(!file.exists(dir_lhs)){
dir.create(dir_lhs)
}
# remove dirac prior
ssm_model <- readRDS(file.path(dir_model,"ssm_model.rds"))
theta_estimated_names <- names(ssm_model$theta$init)
covmat <- ssm_model$theta$covmat
theta_priors <- ssm_model$theta_priors
for(i in 1:sample_size){
init_theta <- sample_from_prior(theta_priors, theta_estimated_names)
names(init_theta) <- theta_estimated_names
# init_theta[["beta_I"]] <- runif(1,0,2)
# init_theta[["beta_H"]] <- runif(1,1,5)
# init_theta[["beta_F"]] <- runif(1,0,2)
# init_theta[["shift_sigmo_H"]] <- runif(1,35,45)
# init_theta[["shape_sigmo_H"]] <- runif(1,0,1)
# init_theta[["shift_sigmo_com"]] <- runif(1,45,55)
# init_theta[["shape_sigmo_com"]] <- runif(1,0,1)
theta_json <- list(resources=ssm_resources(init_theta, covmat))
write(toJSON(theta_json),file=file.path(dir_lhs,paste0("theta_",i-1,".json")))
}
}
do_lhs <- function(n_cores=NULL) {
dir_lhs <- file.path(dir_model,"lhs")
dir_bin <- file.path(dir_model,"bin")
# look into dir_model/lhs and extract all theta.json
theta_files <- grep("theta_[0-9]+.json",list.files(dir_lhs),value=TRUE)
# # run a for loop with system call
for(i in seq_along(theta_files)){
theta_file <- theta_files[i]
cmd <- sprintf("cd %s; cat %s | ./simplex -M 10000 --prior > %s/theta_map_simplex_%s.json",
dir_bin,
file.path(dir_lhs,theta_file),
dir_lhs,
i-1
)
system(cmd, wait=FALSE)
}
}
summarize_lhs <- function() {
dir_lhs <- file.path(dir_model,"lhs")
dir_rds <- file.path(dir_lhs,"rds")
if(!file.exists(dir_rds)){
dir.create(dir_rds)
}
file_names <- grep(".*simplex.*",list.files(dir_lhs),value=TRUE)
# read all files
names(file_names) <- file_names
df_ll <- ldply(file_names, function(file_name) {
res <- try(fromJSON(file=file.path(dir_lhs,file_name)), silent=TRUE)
if(inherits(res, "try-error")){
return(NA)
} else {
return(res$resources[[3]]$data$log_ltp)
}
}, .progress="text")
df_ll <- na.omit(df_ll)
names(df_ll) <- c("file_name","log_ltp")
df_theta <- ddply(df_ll,"file_name",function(df) {
res <- fromJSON(file=file.path(dir_lhs,df$file_name))
unlist(res$resources[[1]]$data)
}, .progress="text")
df_summarize <- left_join(df_theta, df_ll, by="file_name")
saveRDS(df_summarize, file=file.path(dir_rds, "summarize_lhs.rds"))
if(0){
# analysis
x <- readRDS(file.path(dir_model,"lhs_simplex","rds","summarize_lhs.rds"))
x <- df_summarize
min_log_ltp <- -2180
df_plot <- x %>% filter(log_ltp > min_log_ltp & log_ltp < -130) %>% gather(variable, value, -file_name)
p <- ggplot(df_plot, aes(x=value)) + facet_wrap(~variable, scales="free")
p <- p + geom_histogram()
print(p)
# df_plot <- x %>% filter(log_ltp > min_log_ltp)
# p <- ggplot(df_plot, aes(x=R0__sierra_leone, y=t_0__sierra_leone))+geom_point()
# print(p)
dir <- file.path(dir_model,"lhs_simplex","figures")
if(!file.exists(dir)){
dir.create(dir, recursive=TRUE)
}
ggsave(file.path(dir,paste0("dist_simplex_ll>",min_log_ltp,".pdf")))
}
}
get_map_lhs <- function() {
dir_lhs <- file.path(dir_model,"lhs")
dir_rds <- file.path(dir_lhs,"rds")
ssm_model <- readRDS(file.path(dir_model,"ssm_model.rds"))
df_lhs <- readRDS(file.path(dir_rds,"summarize_lhs.rds"))
if(all(df_lhs$log_ltp <= 0)){
df_lhs <- df_lhs %>% filter(log_ltp < -10)
}
df_lhs <- df_lhs %>% filter(log_ltp==max(log_ltp))
cmd <- sprintf("cp %s %s/theta_map_simplex.json",file.path(dir_lhs, df_lhs$file_name),dir_model)
system(cmd)
}
do_mcmc <- function(n_iter_short_run=1e4, n_iter_long_run=1e5, n_traj=1000) {
dir_bin <- file.path(dir_model,"bin")
dir_mcmc <- file.path(dir_model,"mcmc")
if(!file.exists(dir_mcmc)){
dir.create(dir_mcmc)
}
cmd <- sprintf("cd %s; cat %s/theta_map_simplex.json | ./pmcmc --iter %0.f --eps_switch 20 --cooling 0.99 --switch 500 --seed_time | ./pmcmc --iter %0.f --eps_switch 20 --cooling 0.99 --switch 500 --seed_time --trace --traj --n_traj %s --acc --root %s > %s/theta_mean_mcmc.json
",
dir_bin,
dir_model,
n_iter_short_run,
n_iter_long_run,
n_traj,
dir_mcmc,
dir_mcmc
)
system(cmd)
}
analyse_mcmc <- function(burn = 5000, thin = 50, likelihood=c("deterministic","kalman","smc"), theta_true=NULL) {
likelihood <- match.arg(likelihood)
if(0){
burn = 50
thin = 10
likelihood="deterministic"
theta_true=NULL
}
ssm_model <- readRDS(file.path(dir_model,"ssm_model.rds"))
library(coda)
dir_mcmc <- file.path(dir_model,switch(likelihood, deterministic="mcmc", kalman="kmcmc", smc="pmcmc"))
dir_mcmc_figures <- file.path(dir_mcmc,"figures")
dir_mcmc_rds <- file.path(dir_mcmc,"rds")
if(!file.exists(dir_mcmc_figures)){
dir.create(dir_mcmc_figures)
}
if(!file.exists(dir_mcmc_rds)){
dir.create(dir_mcmc_rds)
}
trace_files <- grep("trace_",list.files(dir_mcmc),value=TRUE)
traj_files <- grep("X_",list.files(dir_mcmc),value=TRUE)
# read all csv files
list_trace <- llply(file.path(dir_mcmc,trace_files),read.csv, .progress="text")
list_traj <- llply(file.path(dir_mcmc,traj_files),read.csv, .progress="text")
# increment index
length_trace <- sapply(list_trace, nrow)
add_to_index <- c(0,cumsum(length_trace)[-length(length_trace)])
for(chain in seq_along(add_to_index)){
list_trace[[chain]]$index <- list_trace[[chain]]$index + add_to_index[chain]
list_traj[[chain]]$index <- list_traj[[chain]]$index + add_to_index[chain]
}
saveRDS(list_trace, file=file.path(dir_mcmc_rds, "list_trace.rds"))
saveRDS(list_traj, file=file.path(dir_mcmc_rds, "list_traj.rds"))
if(0){
list_trace <- readRDS(file=file.path(dir_mcmc_rds, "list_trace.rds"))
list_traj <- readRDS(file=file.path(dir_mcmc_rds, "list_traj.rds"))
}
fitted_theta <- setdiff(names(list_trace[[1]]),c("index"))
# create mcmc.list object with fitted parameters
my_mcmc <- mcmc.list(llply(list_trace,function(x) {mcmc(x[fitted_theta])}))
# ACCEPTANCE RATE ----------------------------------------------------------------------------------------
x <- 1-sapply(my_mcmc,rejectionRate)
message("acceptance rate")
print(x)
# BURN AND THIN ----------------------------------------------------------------------------------------
my_mcmc_burn <- burnAndThin(my_mcmc,burn=burn)
p <- acfplot(my_mcmc_burn,aspect=0.7,lag.max=100)
png(file.path(dir_mcmc_figures,"acf_burn.png"),width=10,height=15,units="in",res=300)
print(p)
dev.off()
my_mcmc_burn_thin <- burnAndThin(my_mcmc_burn,thin=thin)
p <- acfplot(my_mcmc_burn_thin,aspect=0.7,lag.max=100)
png(file.path(dir_mcmc_figures,"acf_burn_thin.png"),width=10,height=15,units="in",res=300)
print(p)
dev.off()
p <- xyplot(my_mcmc_burn_thin,strip = FALSE, strip.left = strip.custom(style = 1, horizontal = FALSE))
png(file.path(dir_mcmc_figures,"trace_burn_thin.png"),width=10,height=15,units="in",res=300)
print(p)
dev.off()
# POSTERIOR ----------------------------------------------------------------------------------------
png(file.path(dir_mcmc_figures,"density_plot.png"),width=10,height=7,units="in",res=300)
plotPosteriorDensity(as.list(my_mcmc_burn_thin))
dev.off()
# combine for level plot
my_mcmc_burn_thin_combined <- mcmc(ldply(my_mcmc_burn_thin))
p <- levelplot(my_mcmc_burn_thin_combined, col.regions = rev(heat.colors(100)),scales = list(x = list(rot = 45)))
png(file.path(dir_mcmc_figures,"correlation_plot.png"),width=10,height=7,units="in",res=300)
print(p)
dev.off()
# COMBINE ----------------------------------------------------------------------------------------
df_trace_combined <- ldply(list_trace)
# POSTERIOR + PRIOR ----------------------------------------------------------------------------------------
priors <- ssm_model$theta_priors
df_limits <- melt(df_trace_combined[fitted_theta],value.name="x",variable.name="theta")
x_limits <- dlply(df_limits,"theta",function(df) {range(df$x)})
# Manual edit to enlarge plot of some priors
# x_limits$cfr[1] <- NA
# x_limits$p_hosp[1] <- NA
# compute prior
df_prior <- plot_priors(priors, theta=fitted_theta,quantile_limits=c(0.0001,0.9999), x_limits=x_limits, plot=FALSE) %>%
mutate(probability="prior", probability= probability %>% factor(levels=c("prior","posterior")))
plot_trace <- my_mcmc_burn_thin_combined %>% as.data.frame
# # new function
df_trace <- plot_trace %>%
gather_("theta","value",names(plot_trace)) %>%
mutate(probability="posterior", probability= probability %>% factor(levels=c("prior","posterior")))
saveRDS(list(df_trace,df_prior),file.path(dir_mcmc_rds,"test.rds"))
x <- readRDS(file.path(dir_mcmc_rds,"test.rds"))
df_trace <- x[[1]]
df_prior <- x[[2]]
p <- ggplot(df_trace, aes(fill=probability)) + facet_wrap(~theta, scales="free")
p <- p + geom_area(data=df_prior, aes(x=x, y=density), alpha=0.4)
p <- p + geom_histogram(data=df_trace, aes(x=value, y=..density..),alpha=0.6)
p <- p + scale_fill_discrete("Probability", breaks=c("prior","posterior"))
p <- p + xlab("Parameter") + ylab("Density") + theme(legend.position="top")
ggsave(file.path(dir_mcmc_figures,"posterior_vs_prior.pdf"), width=10, height=5)
# TRACER FILE ----------------------------------------------------------------------------------------
df_tracer <- as.data.frame(my_mcmc_burn_thin_combined)
df_tracer <- data.frame(state=(1:nrow(df_tracer))-1,df_tracer)
df_tracer$time <- NULL
data_files <- file.path(dir_model,"data",grep("data",list.files(file.path(dir_model,"data")),value=TRUE))
df_data <- ldply(data_files, function(x) {x %>% read.csv}) %>% mutate(date=as.Date(date)) %>% gather(state, value, -date)
df_traj_combined <- ldply(list_traj)
# plot posterior traj ----------------------------------------------------------------------------------------
df_traj_plot <- df_traj_combined %>% mutate(date=as.Date(date)) %>% gather(state, value, -date, -index) %>% group_by(date, state) %>% summarize(mean=mean(value), median=median(value), lower_50=quantile(value, 0.25), upper_50=quantile(value, 0.75), lower_95=quantile(value, 0.025), upper_95=quantile(value, 0.975))
p <- ggplot(df_traj_plot, aes(x=date)) + facet_wrap(~state, scales="free_y")
p <- p + geom_ribbon(aes(ymin=lower_95, ymax=upper_95))
p <- p + geom_line(aes(y=median))
p <- p + geom_point(data=df_data, aes(y=value), colour="red")
ggsave(file.path(dir_mcmc_figures,"fit.pdf"), width=10, height=5)
saveRDS(df_trace_combined,file.path(dir_mcmc_rds,"trace_combined.rds"))
saveRDS(df_traj_combined,file.path(dir_mcmc_rds,"df_traj_sample.rds"))
write.table(df_tracer,file=file.path(dir_mcmc_figures,"tracer.txt"),row.names=FALSE,quote=FALSE,sep="\t")
x <- summary(df_trace_combined)
write.table(x,file=file.path(dir_mcmc_figures,"posterior_summary.txt"),row.names=FALSE,quote=FALSE,sep="\t")
}
inv_logit <- function(x) {
1/(1+exp(-x))
}
ssm2R_resources <- function(theta_json){
# create object
theta <- theta_json$resources[[1]]$data %>% unlist
# only covmat names
theta_names <- theta_json$resources[[2]]$data %>% names
n_theta <- length(theta_names)
covmat <- matrix(0, ncol=n_theta, nrow=n_theta, dimnames=list(theta_names,theta_names))
# fill matrix
m <- theta_json$resources[[2]]$data %>% unlist %>% t %>% data.frame %>% melt %>% separate(variable, c("row_name","col_name"),sep="\\.")
for(x in 1:nrow(m)){
covmat[m$row_name[x],m$col_name[x]] <- m$value[x]
}
return(list(theta=theta, covmat=covmat))
}
plot_simu <- function(model) {
if(0){
model <- "SIR_ssm"
}
df_traj <- read.csv(file.path(dir_ssm,model,"simu","X_0.csv"))
df_data <- read.csv(file.path(dir_ssm,model,"data","data.csv"))
df_traj_plot <- gather(df_traj, state, value, -date, -index) %>% mutate(date=as.Date(date))
df_data_plot <- gather(df_data, state, value, -date) %>% mutate(date=as.Date(date))
p <- ggplot(data=df_traj_plot, aes(x=date, y=value)) + facet_wrap(~state, scales="free_y")
p <- p + geom_line(aes(group=index), col="red", alpha=0.5)
p <- p +geom_point(data=df_data_plot)
print(p)
}
FindMAP <- function(likelihood=c("deterministic","kalman","smc")){
dir_mcmc <- file.path(dir_model,switch(likelihood, deterministic="mcmc", kalman="kmcmc", smc="pmcmc"))
#import trace file
trace_files <- grep("trace_bis",list.files(dir_mcmc),value=TRUE)
trace =read.table(file =file.path(dir_mcmc,trace_files) , sep=",", header=T, row.names=NULL)
# names
list.name.theta <- names(trace[which(trace$fitness==max(trace$fitness)),])[1:(dim(trace)[2]-2)]
# find maximum likelihood
map.theta=trace[which(trace$fitness==max(trace$fitness)),][1,]
map.theta=as.numeric(map.theta[,c(1:(length(list.name.theta)))])
names(map.theta)=list.name.theta # named vector
#covariance matrix
map.covmat <- diag(map.theta/10)
colnames(map.covmat) <- rownames(map.covmat) <- names(map.theta)
#write json format
resources.map_json <- ssm_resources(map.theta, map.covmat)
theta.map_json <- list(resources=resources.map_json)
llk = switch(likelihood, deterministic="mcmc", kalman="kmcmc", smc="pmcmc")
write(toJSON(theta.map_json),file=file.path(dir_model,sprintf("theta_map_%s.json",llk)))
}
generate_predict <- function() {
dir_pmcmc <- file.path(dir_model,"pmcmc")
if(!file.exists(dir_pmcmc)){
dir.create(dir_pmcmc)
}
dir_predict <- file.path(dir_pmcmc,"predict")
if(!file.exists(dir_predict)){
dir.create(dir_predict)
}
predict_json <- fromJSON(file=file.path(dir_pmcmc, "predict.json"))
covariance=list(predict_json$resources[[2]])
prediction=predict_json$resources[[4]]$data
for (i in (1:length(prediction))){
prediction[[i]]$resources=append(prediction[[i]]$resources, covariance)
write(toJSON(prediction[[i]]),file=file.path(dir_predict, paste("predict_",as.character(i),".json", sep="")))
}
}
do_predict <- function(n_cores=NULL) {
dir_predict <- file.path(dir_pmcmc,"predict")
dir_bin <- file.path(dir_model,"bin")
# look into dir_model/lhs and extract all theta.json
theta_files <- grep("predict_[0-9]+.json",list.files(dir_predict),value=TRUE)
# # run a for loop with system call
for(i in seq_along(theta_files)){
theta_file <- theta_files[i]
cmd <- sprintf("cd %s; cat %s | ./smc psr -J 1000  --traj -I %s --root %s ",
dir_bin,
file.path(dir_predict,theta_file),
i,
dir_predict
)
system(cmd, wait=TRUE)
}
}
summarize_mcmc <- function() {
dir_lhs <- file.path(dir_model,"mcmc")
dir_rds <- file.path(dir_lhs,"rds")
if(!file.exists(dir_rds)){
dir.create(dir_rds)
}
file_names <- grep(".*mle.*",list.files(dir_lhs),value=TRUE)
# read all files
names(file_names) <- file_names
df_ll <- ldply(file_names, function(file_name) {
res <- try(fromJSON(file=file.path(dir_lhs,file_name)), silent=TRUE)
if(inherits(res, "try-error")){
return(NA)
} else {
return(c(res$resources[[3]]$data$log_likelihood,res$resources[[3]]$data$log_ltp))
}
}, .progress="text")
df_ll <- na.omit(df_ll)
names(df_ll) <- c("file_name","log_likelihood","log_ltp")
df_theta <- ddply(df_ll,"file_name",function(df) {
res <- fromJSON(file=file.path(dir_lhs,df$file_name))
unlist(res$resources[[1]]$data)
}, .progress="text")
df_summarize <- left_join(df_theta, df_ll, by="file_name")
saveRDS(df_summarize, file=file.path(dir_rds, "summarize_lhs.rds"))
if(0){
# analysis
x <- readRDS(file.path(dir_model,"lhs_simplex","rds","summarize_lhs.rds"))
x <- df_summarize
min_log_ltp <- -2180
df_plot <- x %>% filter(log_ltp > min_log_ltp & log_ltp < -130) %>% gather(variable, value, -file_name)
p <- ggplot(df_plot, aes(x=value)) + facet_wrap(~variable, scales="free")
p <- p + geom_histogram()
print(p)
# df_plot <- x %>% filter(log_ltp > min_log_ltp)
# p <- ggplot(df_plot, aes(x=R0__sierra_leone, y=t_0__sierra_leone))+geom_point()
# print(p)
dir <- file.path(dir_model,"lhs_simplex","figures")
if(!file.exists(dir)){
dir.create(dir, recursive=TRUE)
}
ggsave(file.path(dir,paste0("dist_simplex_ll>",min_log_ltp,".pdf")))
}
}
get_map_mcmc <- function() {
dir_lhs <- file.path(dir_model,"mcmc")
dir_rds <- file.path(dir_lhs,"rds")
ssm_model <- readRDS(file.path(dir_model,"ssm_model.rds"))
df_lhs <- readRDS(file.path(dir_rds,"summarize_lhs.rds"))
if(all(df_lhs$log_ltp <= 0)){
df_lhs <- df_lhs %>% filter(log_ltp < -10)
}
df_lhs <- df_lhs %>% filter(log_ltp==max(log_ltp))
print(df_lhs$file_name)
}
generate_lhs_2= function(sample_size){
dir_lhs <- file.path(dir_model,"lhs")
if(!file.exists(dir_lhs)){
dir.create(dir_lhs)
}
# remove dirac prior
ssm_model <- readRDS(file.path(dir_model,"ssm_model.rds"))
theta_estimated_names <- names(ssm_model$theta$init)
covmat <- ssm_model$theta$covmat
theta_priors <- ssm_model$theta_priors
LHS_square <- randomLHS(sample_size, length(theta_estimated_names))
for(s in 1:sample_size){
init_theta <- sample_from_lhs(theta_priors, theta_estimated_names,index=LHS_square[s,])
names(init_theta) <- theta_estimated_names
theta_json <- list(resources=ssm_resources(init_theta, covmat))
write(toJSON(theta_json),file=file.path(dir_lhs,paste0("theta_",s-1,".json")))
}
}
sample_from_lhs <- function(priors, theta_names=NULL,index) {
if(is.null(theta_names)){
theta <- rep(1, length(priors))
names(theta) <- names(priors)
prior_names <- names(priors)
} else {
theta <- rep(1, length(theta_names))
prior_names <- theta_names
}
if(is.null(names(theta_names))){
names(theta) <- theta_names
} else {
names(theta) <- names(theta_names)
}
for(i in seq_along(theta)){
prior <- priors[[prior_names[i]]]
if(prior$dist=="dirac"){
theta[i] <- prior$args$value
} else {
qprior <- paste0("q",prior$dist)
prior_args <- c(prior$args,index[i])
theta[i] <- do.call(qprior,prior_args)
}
}
return(theta)
}
main <- function() {
model <- "SIR_ssm"
start_me(model=model)
data <- read.csv(file.path(dir_data,"data_all.csv"))
#ssm_build_model(dir_ssm=dir_ssm, model=model, sde=NULL, data=data,  dist_observation="discretized_normal")
#generate_lhs_2(10000)
#do_lhs()
#summarize_lhs()
#get_map_lhs()
#summarize_mcmc()
#get_map_mcmc()
#SIMULATIONS A PARTIR DU SIMPLEX
# simulate under map
dir_simu <- file.path(dir_model,"simu")
if(!file.exists(dir_simu)){
dir.create(dir_simu)
}
# deterministic
#cmd <- sprintf("cd %s/bin; cat ../theta_map_simplex.json | ./simul --traj --root %s ",dir_model,dir_simu)
#system(cmd)
#plot_simu(model)
dir_det <- file.path(dir_model,"mcmc")
if(!file.exists(dir_det)){
dir.create(dir_det)
}
cmd <- sprintf("cd %s/bin; cat ../theta_map_simplex.json | ./pmcmc -J 1 -M 100000 --trace --traj --hat -I 1 --root %s > %s/theta_pmcmc_det.json",dir_model,dir_det, dir_model)
system(cmd)
#cmd <- sprintf("cd %s/bin; cat ../theta_pmcmc_det.json | ./pmcmc -J 1 -M 100000 --switch 500000  --trace --traj --hat -I 1 --root %s > %s/theta_pmcmc_det2.json",dir_model,dir_det, dir_model)
#system(cmd)
analyse_mcmc(burn = 0, thin = 0, likelihood=c("deterministic"), theta_true=NULL)
#cmd <- sprintf(" cd %s/bin; ssm-predict ../theta_pmcmc_det2.json ../mcmc/X_1.csv ../mcmc/trace_1.csv 2002-01-07 | ./simul -I 128 --start 2002-01-07  --end 2015-12-31 --verbose --freq 7 --traj --root %s",dir_model,dir_det)
#system(cmd)
#cmd <- sprintf(" cd %s/bin; ssm-predict ../theta_pmcmc_det3.json ../mcmc/X_1.csv ../mcmc/trace_1.csv 2013-12-30 | ./simul -I 131 --start 2013-12-30  --end 2015-12-31 --verbose --freq 7 --traj --root %s",dir_model,dir_det)
#system(cmd)
#cmd <- sprintf(" cd %s/bin; cat ../theta_pmcmc_det3.json  | ./simul -I 3 --start 2002-01-07  --end 2013-12-30 --verbose --traj --root %s",dir_model,dir_det)
#system(cmd)
}
main()
main <- function() {
model <- "SIR_ssm"
start_me(model=model)
data <- read.csv(file.path(dir_data,"data_all.csv"))
#ssm_build_model(dir_ssm=dir_ssm, model=model, sde=NULL, data=data,  dist_observation="discretized_normal")
#generate_lhs_2(10000)
#do_lhs()
#summarize_lhs()
#get_map_lhs()
#summarize_mcmc()
#get_map_mcmc()
#SIMULATIONS A PARTIR DU SIMPLEX
# simulate under map
dir_simu <- file.path(dir_model,"simu")
if(!file.exists(dir_simu)){
dir.create(dir_simu)
}
# deterministic
#cmd <- sprintf("cd %s/bin; cat ../theta_map_simplex.json | ./simul --traj --root %s ",dir_model,dir_simu)
#system(cmd)
#plot_simu(model)
dir_det <- file.path(dir_model,"mcmc")
if(!file.exists(dir_det)){
dir.create(dir_det)
}
#cmd <- sprintf("cd %s/bin; cat ../theta_map_simplex.json | ./pmcmc -J 1 -M 100000 --trace --traj --hat -I 1 --root %s > %s/theta_pmcmc_det.json",dir_model,dir_det, dir_model)
#system(cmd)
cmd <- sprintf("cd %s/bin; cat ../theta_pmcmc_det.json | ./pmcmc -J 1 -M 100000 --switch 500000  --trace --traj --hat -I 1 --root %s > %s/theta_pmcmc_det2.json",dir_model,dir_det, dir_model)
system(cmd)
analyse_mcmc(burn = 0, thin = 0, likelihood=c("deterministic"), theta_true=NULL)
cmd <- sprintf(" cd %s/bin; ssm-predict ../theta_pmcmc_det2.json ../mcmc/X_1.csv ../mcmc/trace_1.csv 2002-01-07 | ./simul -I 128 --start 2002-01-07  --end 2015-12-31 --verbose --freq 7 --traj --root %s",dir_model,dir_det)
system(cmd)
#cmd <- sprintf(" cd %s/bin; ssm-predict ../theta_pmcmc_det3.json ../mcmc/X_1.csv ../mcmc/trace_1.csv 2013-12-30 | ./simul -I 131 --start 2013-12-30  --end 2015-12-31 --verbose --freq 7 --traj --root %s",dir_model,dir_det)
#system(cmd)
#cmd <- sprintf(" cd %s/bin; cat ../theta_pmcmc_det3.json  | ./simul -I 3 --start 2002-01-07  --end 2013-12-30 --verbose --traj --root %s",dir_model,dir_det)
#system(cmd)
}
main()
